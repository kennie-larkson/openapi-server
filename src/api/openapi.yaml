openapi: 3.0.0
info:
  title: TEAM APHKA OpenAPI Design Document
  version: 1.0.0
  description: API for user registration and authentication.
servers:
  - url: "http://localhost:7000/api"
paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  statusCode:
                    type: number
                    example: 400
        "422":
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
                        statusCode:
                          type: number
                          example: 422

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  statusCode:
                    type: number
                    example: 400
        "401":
          description: Unauthorized - Invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  statusCode:
                    type: number
                    example: 401

  /auth/forgot-password:
    summary: User forgot their password
    description: Send an email to the user to reset their password
    post:
      tags:
        - Authentication
      summary: "User receives an email to reset their password"
      requestBody:
        description: Forgot password payload
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
              required:
                - email

      responses:
        "200":
          description: Email successfully sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email successfully sent
                  statusCode:
                    type: number
                    example: 200

        "400":
          description: Invalid email
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid input
                  statusCode:
                    type: number
                    example: 400

        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unable to send the email"
                  statusCode:
                    type: number
                    example: 500

  /auth/reset-password:
    summary: User resets their password
    description: User sets a new password
    patch:
      tags:
        - Authentication
      summary: "User resets their password"
      security:
        - bearerAuth: []
      requestBody:
        description: Reset password payload
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                new_password:
                  type: string
                  format: Minimum of 8 charachters and at least one capital letter
                  example: John12345_678
              required:
                - new_password

      responses:
        "200":
          description: Password successfully changed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password successfully changed
                  statusCode:
                    type: number
                    example: 200

        "400":
          description: Invalid password
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid password
                  statusCode:
                    type: number
                    example: 400

        "401":
          description: Invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid token
                  statusCode:
                    type: number
                    example: 401

        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unable to send the email"
                  statusCode:
                    type: number
                    example: 500

  /api/organisations:
    post:
      tags:
        - Organisation
      summary: Create a new organization
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the organization
                  example: "John's Organization"
                  required: true
                description:
                  type: string
                  description: The description of the organization
      responses:
        "201":
          description: Organization created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      orgId:
                        type: string
                      name:
                        type: string
                      description:
                        type: string
                  statusCode:
                    type: number
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  statusCode:
                    type: number
                    example: 400
        "401":
          description: Unauthorized - Invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  statusCode:
                    type: number
                    example: 401

  /api/organisations/{id}:
    get:
      tags:
        - Organisation
      summary: "Gets an organisation by ID"
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: f45ffab2-ec0c-4c1a-acdb-3baeeb691f0c
      responses:
        "200":
          description: Organisation retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: User retrieved successfully
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: f45ffab2-ec0c-4c1a-acdb-3baeeb691f0c
                      name:
                        type: string
                        example: John's Organisation
                      email:
                        type: string
                        format: email
                        example: john@exmaple.org

        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized access
                  statusCode:
                    type: number
                    example: 401
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Forbidden access
                  statusCode:
                    type: number
                    example: 403
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid organisation id
                  statusCode:
                    type: number
                    example: 400

        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unable to retrieve organisation"
                  statusCode:
                    type: number
                    example: 500

  /api/users/{id}:
    summary: User info
    description: Gets a user by ID
    get:
      tags:
        - User
      summary: "Gets a user by ID"
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: f45ffab2-ec0c-4c1a-acdb-3baeeb691f0c
      responses:
        "200":
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: User retrieved successfully
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: f45ffab2-ec0c-4c1a-acdb-3baeeb691f0c
                      name:
                        type: string
                        example: John Doe
                      email:
                        type: string
                        format: email
                        example: john@example.com
                      organization:
                        type: object
                        properties:
                          id:
                            type: string
                            example: f45ffab2-ec0c-4c1a-acdb-3baeeb691f0c
                          name:
                            type: string
                            example: John's Organisation

        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized access
                  statusCode:
                    type: number
                    example: 401
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Forbidden access
                  statusCode:
                    type: number
                    example: 403
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid user id
                  statusCode:
                    type: number
                    example: 400

        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unable to retrieve user"
                  statusCode:
                    type: number
                    example: 500

  /api/payments:
    post:
      tags:
        - Payments
      summary: Process a payment
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Payment"
      responses:
        "200":
          description: Payment processed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  statusCode:
                    type: number
                    example: 400

  /api/notifications:
    get:
      tags:
        - Notifications
      summary: Get user notifications
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Notifications retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Notification"
        "401":
          description: Unauthorized - Invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  statusCode:
                    type: number
                    example: 401

  /api/messages:
    post:
      tags:
        - Messages
      summary: Send a message
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Message"
      responses:
        "200":
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  statusCode:
                    type: number
                    example: 400

  /api/email-templates:
    get:
      tags:
        - Email Templates
      summary: Get email templates
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Email templates retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EmailTemplate"
        "401":
          description: Unauthorized - Invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  statusCode:
                    type: number
                    example: 401

components:
  schemas:
    User:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        name:
          type: string
    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
    Organisation:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    Payment:
      type: object
      properties:
        amount:
          type: number
        currency:
          type: string
        paymentMethod:
          type: string
    PaymentResponse:
      type: object
      properties:
        status:
          type: string
        transactionId:
          type: string
        amount:
          type: number
    Notification:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        message:
          type: string
        read:
          type: boolean
    Message:
      type: object
      properties:
        recipientId:
          type: string
        content:
          type: string
    MessageResponse:
      type: object
      properties:
        status:
          type: string
        messageId:
          type: string
        content:
          type: string
    EmailTemplate:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        subject:
          type: string
        body:
          type: string

securitySchemes:
  bearerAuth:
    type: http
    scheme: bearer
    bearerFormat: JWT
